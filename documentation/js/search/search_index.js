var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.291,1,1.822]],["body/modules/AppModule.html",[0,2.246,1,3.48,2,1.63,3,1.63,4,2.062,5,2.062,6,1.63,7,2.062,8,2.062,9,2.753,10,2.753,11,2.663,12,0.041,13,2.984,14,2.688,15,2.062,16,2.062,17,0.465,18,0.4,19,0.4,20,3.353,21,3.073,22,0.852,23,0.959,24,2.357,25,1.461,26,2.357,27,3.353,28,3.353,29,3.353,30,3.353,31,3.353,32,3.353,33,0.465,34,0.022,35,0.023,36,0.03,37,0.023]],["title/controllers/AuthController.html",[38,1.613,39,1.822]],["body/controllers/AuthController.html",[12,0.041,17,0.349,18,0.3,19,0.3,22,0.825,23,0.72,33,0.349,34,0.016,35,0.017,36,0.024,37,0.017,38,1.371,39,2.21,40,1.371,41,2.067,42,2.067,43,2.518,44,0.3,45,1.268,46,3.44,47,2.946,48,2.526,49,2.067,50,2.686,51,1.826,52,3.594,53,0.963,54,2.518,55,1.479,56,1.479,57,0.668,58,1.479,59,1.479,60,1.791,61,1.77,62,3.594,63,2.518,64,2.518,65,1.512,66,2.518,67,2.518,68,2.518,69,2.067,70,2.067,71,2.067,72,2.067,73,2.95,74,1.548,75,2.067,76,1.371,77,2.037,78,2.067,79,1.77,80,1.77,81,2.21,82,2.067,83,1.77,84,2.518,85,2.518,86,2.067,87,3.594,88,1.142,89,2.518,90,2.518,91,2.518,92,2.518,93,1.77,94,2.067,95,2.518,96,2.526,97,2.067,98,2.518,99,2.518,100,2.518,101,2.518]],["title/classes/AuthCredentialsDto.html",[34,0.019,50,1.44]],["body/classes/AuthCredentialsDto.html",[12,0.04,17,0.389,18,0.334,19,0.334,22,0.618,33,0.389,34,0.025,35,0.019,36,0.026,37,0.019,44,0.334,50,1.884,51,1.689,53,0.891,57,0.764,65,1.37,76,1.527,102,0.99,103,3.647,104,2.302,105,1.689,106,3.279,107,2.192,108,2.368,109,2.804,110,3.876,111,3.876,112,3.876,113,2.804,114,2.329,115,2.947,116,3.876,117,2.804,118,2.804,119,3.182,120,3.876,121,2.804,122,3.647,123,4.442,124,2.804,125,2.804,126,2.804,127,1.724,128,3.876,129,2.804,130,2.804,131,4.442,132,4.442,133,2.419,134,2.804,135,3.876,136,3.876,137,2.804,138,1.363,139,2.804,140,2.804,141,2.804,142,2.804]],["title/modules/AuthModule.html",[0,1.291,11,1.44]],["body/modules/AuthModule.html",[0,1.962,2,1.398,3,1.398,4,1.769,5,1.769,6,1.398,7,2.768,8,2.768,11,2.696,12,0.041,14,2.425,15,1.769,16,1.769,17,0.399,18,0.343,19,0.343,21,2.022,22,0.872,23,0.823,24,2.022,25,1.253,33,0.399,34,0.019,35,0.02,36,0.027,37,0.02,39,2.768,40,2.148,77,2.548,78,2.361,143,2.361,144,2.361,145,2.361,146,3.111,147,2.876,148,2.876,149,2.876,150,3.945,151,2.876,152,2.876,153,2.425,154,2.361,155,1.398,156,2.022,157,2.876,158,2.876,159,2.876,160,2.361,161,2.876,162,2.876,163,2.876,164,2.876,165,2.876]],["title/injectables/AuthService.html",[77,1.44,166,1.291]],["body/injectables/AuthService.html",[12,0.041,17,0.357,18,0.306,19,0.306,22,0.806,23,0.735,25,1.12,33,0.357,34,0.017,35,0.017,36,0.025,37,0.017,44,0.306,45,1.287,46,3.479,47,2.563,49,2.109,50,2.696,53,0.974,55,1.496,56,1.496,57,0.676,58,1.496,59,1.287,60,1.808,61,2.563,77,1.772,79,1.806,80,1.806,88,1.159,93,2.563,107,1.847,153,1.58,155,2.459,156,1.806,166,1.589,167,1.58,168,2.109,169,2.459,170,2.563,171,2.109,172,5.203,173,2.569,174,2.569,175,2.569,176,2.109,177,2.569,178,1.806,179,1.985,180,2.109,181,2.109,182,2.242,183,2.569,184,1.661,185,1.772,186,2.569,187,1.399,188,1.12,189,2.569,190,2.569,191,2.109,192,2.569]],["title/classes/CreateTaskDto.html",[34,0.019,193,1.44]],["body/classes/CreateTaskDto.html",[12,0.04,17,0.437,18,0.376,19,0.376,22,0.669,33,0.437,34,0.027,35,0.021,36,0.029,37,0.021,44,0.376,48,2.95,51,1.829,53,0.964,57,0.802,76,1.716,102,1.112,105,1.829,108,2.433,114,2.798,115,3.092,122,3.872,127,1.938,133,2.739,193,2.039,194,3.872,195,2.587,196,3.682,197,4.196,198,1.971,199,3.151,200,3.151,201,3.872]],["title/interfaces/JwtPayload.html",[179,1.613,202,1.822]],["body/interfaces/JwtPayload.html",[12,0.039,17,0.576,18,0.495,19,0.495,33,0.576,35,0.028,36,0.034,37,0.028,44,0.495,57,0.662,105,2.178,107,2.425,108,2.337,179,2.721,202,2.553,203,4.152,204,2.918,205,3.408]],["title/injectables/JwtStratgey.html",[146,1.613,166,1.291]],["body/injectables/JwtStratgey.html",[12,0.041,17,0.363,18,0.312,19,0.312,22,0.834,23,0.748,25,1.139,33,0.363,34,0.017,35,0.018,36,0.025,37,0.018,44,0.312,45,1.303,53,0.848,55,1.303,56,1.303,57,0.588,58,1.303,59,0.923,60,1.447,65,1.455,74,1.607,83,1.838,88,0.831,93,2.595,96,2.595,107,1.609,146,2.01,153,2.269,154,3.03,155,2.473,156,1.838,160,2.146,166,1.609,167,1.607,169,2.079,170,2.595,171,2.146,176,3.03,178,1.838,179,2.531,180,2.146,181,2.146,182,1.607,184,1.447,185,1.27,187,1.424,188,1.139,191,3.816,204,3.008,206,2.146,207,3.512,208,2.614,209,3.691,210,2.614,211,2.614,212,2.614,213,2.146,214,3.691,215,2.595,216,2.614,217,1.424,218,2.614,219,2.614,220,2.614,221,2.614,222,2.614,223,2.614,224,2.614,225,2.614]],["title/classes/TaskEntity.html",[34,0.019,226,1.291]],["body/classes/TaskEntity.html",[12,0.041,17,0.384,18,0.33,19,0.33,22,0.703,33,0.384,34,0.018,35,0.019,36,0.026,37,0.019,44,0.33,51,2.258,53,1.191,57,0.847,65,1.549,102,0.977,105,1.675,108,2.077,114,2.144,138,2.316,196,3.102,198,0.977,217,2.092,226,1.675,227,2.273,228,3.623,229,2.403,230,1.923,231,3.102,232,4.516,233,2.769,234,3.623,235,2.769,236,1.923,237,2.769,238,2.769,239,2.769,240,2.273,241,3.154,242,3.842,243,2.769,244,2.769,245,1.702,246,2.701,247,3.842,248,1.508,249,1.346,250,2.769]],["title/classes/TaskRepository.html",[34,0.019,251,1.613]],["body/classes/TaskRepository.html",[12,0.041,17,0.305,18,0.262,19,0.262,22,0.764,33,0.305,34,0.014,35,0.015,36,0.022,37,0.015,44,0.262,45,1.148,53,0.747,55,1.148,56,1.148,57,0.518,58,1.148,59,1.148,60,1.679,65,1.584,88,1.034,102,0.775,114,1.581,133,1.771,169,2.328,184,1.793,185,1.581,188,0.957,193,2.41,196,2.286,198,0.775,217,1.771,226,1.867,230,1.994,231,2.286,236,0.957,245,1.35,246,1.543,248,1.195,249,1.067,251,1.771,252,1.802,253,3.012,254,3.012,255,3.012,256,1.543,257,2.195,258,1.543,259,2.41,260,2.195,261,1.802,262,1.543,263,1.543,264,1.543,265,1.543,266,1.543,267,2.195,268,2.195,269,3.252,270,3.517,271,3.933,272,2.195,273,2.195,274,1.802,275,2.195,276,2.195,277,2.195,278,2.195,279,1.802,280,2.195,281,2.286,282,2.195,283,1.802,284,2.195,285,2.195,286,2.195,287,1.543,288,3.252,289,2.195,290,1.802]],["title/classes/TaskStatusValidationPipe.html",[34,0.019,291,1.822]],["body/classes/TaskStatusValidationPipe.html",[12,0.041,17,0.385,18,0.331,19,0.331,22,0.614,23,0.794,33,0.385,34,0.018,35,0.019,36,0.026,37,0.019,44,0.459,45,1.359,53,1.016,55,1.359,56,1.359,57,0.705,58,1.359,59,1.359,88,1.517,94,2.28,102,0.98,105,1.678,115,1.708,133,2.407,138,1.35,182,2.718,184,1.089,187,1.512,188,1.21,198,0.98,215,1.952,229,1.512,230,2.318,236,1.21,249,1.35,287,2.707,291,2.368,292,3.918,293,2.28,294,3.851,295,4.42,296,4.42,297,4.42,298,3.851,299,3.851,300,2.718,301,3.161,302,3.851,303,2.777,304,3.851,305,2.777,306,3.851,307,3.851,308,2.777,309,2.777,310,2.777,311,2.777,312,3.851,313,2.777]],["title/controllers/TasksController.html",[38,1.613,314,1.822]],["body/controllers/TasksController.html",[12,0.041,17,0.23,18,0.198,19,0.198,22,0.798,23,0.474,33,0.23,34,0.011,35,0.011,36,0.018,37,0.011,38,0.903,40,0.903,42,1.362,44,0.198,45,0.926,51,1.757,53,0.926,55,1.423,56,1.423,57,0.643,58,1.423,59,1.423,60,1.825,65,1.666,69,2.154,70,2.154,71,1.362,72,1.362,73,1.362,74,1.02,75,1.362,76,0.903,81,2.636,82,1.362,86,1.362,88,1.281,97,1.362,114,1.959,138,2.329,193,2.083,198,1.149,226,0.723,229,2.334,230,1.757,236,1.613,245,1.02,249,0.806,254,2.288,255,2.288,256,1.166,258,1.166,259,2.083,262,1.166,263,1.166,264,1.166,265,1.166,266,1.166,270,1.362,281,3.157,290,1.362,291,1.613,314,1.613,315,1.362,316,3.255,317,2.672,318,2.672,319,1.659,320,2.624,321,1.659,322,1.659,323,1.659,324,1.659,325,4.287,326,4.49,327,2.624,328,1.659,329,1.362,330,2.624,331,1.659,332,1.659,333,1.659,334,2.624,335,1.659,336,1.362,337,1.659,338,2.624,339,1.659,340,1.659,341,3.701,342,1.659,343,1.659,344,1.659,345,2.624,346,2.624,347,3.701,348,1.166,349,1.659,350,1.659,351,1.582,352,1.362,353,1.659,354,1.659,355,1.659,356,1.659,357,1.659,358,3.255,359,1.659,360,1.659,361,1.659,362,1.659,363,1.659,364,1.659,365,1.659,366,1.659,367,1.659]],["title/classes/TasksFilterDto.html",[34,0.019,259,1.44]],["body/classes/TasksFilterDto.html",[12,0.04,17,0.491,18,0.422,19,0.422,22,0.722,33,0.491,34,0.03,35,0.024,36,0.031,37,0.024,44,0.422,51,1.973,53,1.04,57,0.722,102,1.249,105,1.973,108,1.973,127,2.177,198,1.249,201,3.716,230,2.175,236,2.175,249,1.72,259,2.2,271,4.097,287,2.489,301,2.906,368,4.097,369,2.906,370,3.54,371,3.54,372,3.54,373,3.54,374,3.54,375,4.99,376,3.54]],["title/modules/TasksModule.html",[0,1.291,13,1.613]],["body/modules/TasksModule.html",[0,2.256,2,1.479,3,1.479,4,1.871,5,1.871,6,1.479,7,2.85,8,1.871,11,2.692,12,0.041,13,3.017,14,2.52,15,1.871,16,1.871,17,0.422,18,0.363,19,0.363,21,2.882,22,0.869,23,0.87,24,2.14,25,1.326,33,0.422,34,0.02,35,0.021,36,0.028,37,0.021,40,2.232,198,1.447,251,2.232,283,2.499,314,2.85,351,2.591,352,2.499,377,2.499,378,3.044,379,2.499,380,3.044,381,3.044,382,2.499,383,3.044,384,3.044,385,4.099,386,3.044,387,3.044,388,3.044,389,3.044,390,3.044,391,3.044]],["title/injectables/TasksService.html",[166,1.291,351,1.44]],["body/injectables/TasksService.html",[12,0.041,17,0.243,18,0.209,19,0.209,22,0.778,23,0.501,25,0.764,33,0.243,34,0.011,35,0.023,36,0.019,37,0.012,44,0.209,45,0.967,53,1.008,55,1.549,56,1.549,57,0.7,58,1.549,59,1.461,60,1.955,65,1.665,88,1.073,138,2.371,166,1.195,167,1.078,169,2.51,170,1.927,178,1.233,182,1.078,184,1.323,185,1.854,187,1.838,188,1.471,193,2.133,198,1.347,226,0.764,229,2.852,230,1.804,231,2.372,236,1.663,245,1.078,249,0.852,251,2.39,254,2.372,255,1.927,256,1.233,258,1.927,259,2.012,262,1.233,263,1.233,264,1.233,265,1.233,266,1.233,274,2.77,317,2.25,318,2.77,329,2.25,336,1.44,351,1.332,382,1.44,392,1.44,393,2.741,394,1.754,395,1.754,396,1.754,397,2.741,398,1.754,399,1.754,400,1.754,401,1.754,402,1.754,403,1.754,404,1.754,405,1.754,406,1.754,407,1.754,408,3.375,409,3.375,410,1.754,411,1.754,412,2.741,413,1.754]],["title/classes/User.html",[34,0.019,65,0.847]],["body/classes/User.html",[12,0.041,17,0.353,18,0.304,19,0.304,22,0.672,33,0.353,34,0.017,35,0.017,36,0.025,37,0.017,44,0.304,45,1.279,51,2.116,53,1.159,55,0.899,56,0.899,57,0.827,58,0.899,59,0.899,60,1.42,65,1.036,88,0.81,102,0.899,105,1.579,106,2.825,107,1.838,108,2.352,119,2.974,138,1.761,169,2.05,184,0.998,185,1.238,198,0.899,217,1.973,226,2.002,228,3.462,229,2.297,232,4.261,234,3.462,240,2.091,241,2.974,246,2.547,248,1.387,281,2.965,414,2.091,415,3.462,416,3.623,417,2.547,418,2.547,419,2.547,420,2.547,421,2.974,422,2.547,423,2.547,424,3.623,425,2.547,426,2.547,427,2.547,428,3.623,429,2.547,430,2.547,431,2.547,432,2.547,433,2.547,434,2.974,435,2.091,436,2.547,437,2.547]],["title/classes/UserRepository.html",[34,0.019,155,1.44]],["body/classes/UserRepository.html",[12,0.041,17,0.306,18,0.263,19,0.263,22,0.731,23,0.631,33,0.306,34,0.014,35,0.015,36,0.022,37,0.015,44,0.263,45,1.152,47,2.295,50,2.643,53,0.893,55,1.371,56,1.371,57,0.619,58,1.371,59,1.371,60,1.881,61,2.295,65,1.373,79,1.551,80,1.551,83,1.551,88,1.235,102,0.779,106,2.819,107,1.872,108,2.092,155,1.586,169,2.531,184,1.683,185,2.228,187,1.777,188,1.693,207,1.811,215,1.551,217,1.777,248,1.201,253,2.732,261,1.811,300,1.356,415,3.526,426,2.295,434,1.811,435,1.811,438,1.811,439,3.264,440,3.886,441,3.264,442,2.206,443,2.206,444,2.206,445,2.206,446,2.206,447,3.264,448,2.206,449,3.264,450,3.264,451,2.206,452,2.206,453,2.206,454,2.206,455,2.206,456,2.206,457,2.206,458,2.206,459,2.206,460,2.206,461,2.206,462,2.206,463,2.206,464,2.206,465,2.206,466,2.206,467,2.206]],["title/coverage.html",[468,2.83]],["body/coverage.html",[6,1.398,12,0.04,19,0.343,26,2.022,34,0.036,35,0.02,36,0.027,37,0.02,38,2.148,39,1.769,41,2.361,50,1.398,57,0.459,65,0.823,77,1.398,81,1.769,103,2.361,104,2.361,146,1.566,155,1.398,166,1.962,168,2.361,179,1.566,188,1.253,193,1.398,194,2.361,195,2.361,202,1.769,204,2.773,205,2.361,206,2.361,226,1.253,227,2.361,230,1.253,251,1.566,252,2.361,259,1.398,291,1.769,292,2.361,293,2.361,314,1.769,315,2.361,348,2.022,351,1.398,368,2.361,369,2.361,392,2.361,414,2.361,438,2.361,468,2.022,469,2.876,470,2.876,471,2.876,472,5.868,473,4.844,474,5.076,475,2.361,476,3.945,477,4.502,478,2.876,479,4.502,480,2.361,481,2.361,482,2.876,483,2.876,484,2.876,485,2.876]],["title/dependencies.html",[3,1.729,486,2.483]],["body/dependencies.html",[3,1.648,12,0.041,23,0.97,25,1.478,34,0.029,35,0.023,36,0.03,37,0.023,74,2.085,76,1.847,127,2.085,153,2.708,213,3.615,248,1.847,426,2.384,487,4.89,488,3.392,489,3.392,490,3.392,491,4.404,492,3.392,493,4.404,494,3.392,495,3.392,496,3.392,497,3.392,498,3.392,499,3.392,500,3.392,501,3.392,502,3.392,503,3.392,504,3.392,505,3.392,506,3.392,507,3.392,508,3.392,509,3.392,510,3.392,511,3.392,512,3.392,513,3.392,514,3.392,515,3.392,516,3.392,517,3.392,518,3.392,519,3.392]],["title/miscellaneous/enumerations.html",[520,1.207,521,2.921]],["body/miscellaneous/enumerations.html",[12,0.039,35,0.029,36,0.034,37,0.029,44,0.502,236,2.196,300,3.317,520,2.046,521,3.457,522,4.211,523,5.04,524,4.211,525,4.137,526,5.04,527,5.04]],["title/miscellaneous/functions.html",[520,1.207,528,2.921]],["body/miscellaneous/functions.html",[6,2.692,12,0.036,35,0.031,36,0.036,37,0.031,44,0.535,481,3.683,520,2.18,528,3.683,529,4.487]],["title/index.html",[44,0.296,530,2.483,531,2.483]],["body/index.html",[12,0.04,18,0.372,35,0.021,36,0.028,37,0.021,48,2.929,114,1.515,253,2.192,468,2.192,525,2.56,532,3.118,533,3.118,534,4.166,535,3.118,536,3.118,537,3.118,538,3.118,539,3.118,540,3.118,541,3.118,542,3.118,543,3.118,544,4.692,545,3.118,546,3.118,547,3.118,548,5.483,549,3.118,550,3.118,551,3.118,552,5.37,553,3.118,554,3.118,555,4.166,556,3.118,557,3.118,558,3.118,559,3.118,560,4.166,561,3.118,562,3.118,563,3.118,564,4.166,565,4.166,566,3.118,567,3.118,568,3.118,569,3.118,570,2.56,571,3.118,572,3.118,573,3.118,574,3.118,575,3.118,576,3.118,577,3.118,578,3.118,579,3.118,580,3.118,581,3.118,582,3.118,583,3.118,584,3.118,585,3.118,586,3.118,587,3.118,588,3.118]],["title/modules.html",[2,1.956]],["body/modules.html",[1,2.652,2,2.096,11,2.096,12,0.035,13,2.348,35,0.029,36,0.035,37,0.029,570,4.473,589,5.449,590,5.449,591,5.449]],["title/overview.html",[592,3.304]],["body/overview.html",[0,1.484,1,3.383,2,1.655,3,1.655,4,2.093,5,2.093,6,1.655,7,2.093,8,2.093,9,2.795,10,2.795,11,2.789,12,0.039,13,3.05,14,2.714,15,2.093,16,2.093,35,0.023,36,0.03,37,0.023,40,1.854,77,2.381,102,1.202,133,1.854,143,2.795,144,2.795,145,2.795,146,3.05,167,2.093,202,2.093,279,2.795,351,2.381,377,2.795,379,2.795,592,2.795,593,4.414,594,3.405]],["title/miscellaneous/variables.html",[520,1.207,595,2.921]],["body/miscellaneous/variables.html",[12,0.04,26,3.215,35,0.024,36,0.031,37,0.024,44,0.429,57,0.729,81,2.812,88,1.143,96,2.529,106,2.212,107,1.568,115,2.812,184,1.41,300,2.812,348,2.529,421,2.953,475,3.754,480,2.953,520,1.748,595,2.953,596,3.597,597,3.597,598,3.597,599,3.597,600,3.597,601,3.597,602,3.597,603,3.597,604,3.597,605,3.597,606,5.028,607,3.597,608,3.597,609,3.597,610,3.597,611,3.597,612,3.597,613,3.597,614,3.597,615,3.597,616,3.597]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":472,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":509,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["0.2.29",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":477,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":478,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":473,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":479,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":133,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"overview.html":{}}}],["2",{"_index":279,"title":{},"body":{"classes/TaskRepository.html":{},"overview.html":{}}}],["23505",{"_index":462,"title":{},"body":{"classes/UserRepository.html":{}}}],["3",{"_index":593,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{}}}],["4.0.0",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["4.7.5",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["5.0.0",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.5.4",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["7.1.4",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":594,"title":{},"body":{"overview.html":{}}}],["8.3.1",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":506,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["add",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["allowedstatus",{"_index":297,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["already",{"_index":464,"title":{},"body":{"classes/UserRepository.html":{}}}],["amazing",{"_index":571,"title":{},"body":{"index.html":{}}}],["angular",{"_index":543,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":344,"title":{},"body":{"controllers/TasksController.html":{}}}],["apibearerauth('token",{"_index":360,"title":{},"body":{"controllers/TasksController.html":{}}}],["apicreatedresponse",{"_index":345,"title":{},"body":{"controllers/TasksController.html":{}}}],["apiforbiddenresponse",{"_index":346,"title":{},"body":{"controllers/TasksController.html":{}}}],["apiokresponse",{"_index":347,"title":{},"body":{"controllers/TasksController.html":{}}}],["apiproperty",{"_index":122,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{}}}],["apitags",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["apitags('auth",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('tasks",{"_index":353,"title":{},"body":{"controllers/TasksController.html":{}}}],["app",{"_index":550,"title":{},"body":{"index.html":{}}}],["application",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":540,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":431,"title":{},"body":{"classes/User.html":{}}}],["async",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["auth",{"_index":43,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":39,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcredentialsdto",{"_index":50,"title":{"classes/AuthCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["authguard",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":581,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":77,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":385,"title":{},"body":{"modules/TasksModule.html":{}}}],["await",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["backers",{"_index":572,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":309,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["badrequestexception(`${value",{"_index":311,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["baseentity",{"_index":228,"title":{},"body":{"classes/TaskEntity.html":{},"classes/User.html":{}}}],["bcrypt",{"_index":426,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["bcrypt.gensalt",{"_index":451,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":435,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["body",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["body('status",{"_index":366,"title":{},"body":{"controllers/TasksController.html":{}}}],["body(validationpipe",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":306,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":591,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":589,"title":{},"body":{"modules.html":{}}}],["build",{"_index":269,"title":{},"body":{"classes/TaskRepository.html":{}}}],["building",{"_index":535,"title":{},"body":{"index.html":{}}}],["case",{"_index":135,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["catch",{"_index":456,"title":{},"body":{"classes/UserRepository.html":{}}}],["character",{"_index":140,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["check",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["class",{"_index":34,"title":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/TasksFilterDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":102,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/TasksFilterDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":377,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_imports",{"_index":378,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":379,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["code",{"_index":458,"title":{},"body":{"classes/UserRepository.html":{}}}],["column",{"_index":232,"title":{},"body":{"classes/TaskEntity.html":{},"classes/User.html":{}}}],["columns",{"_index":432,"title":{},"body":{"classes/User.html":{}}}],["config/typeorm.config",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":446,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('username",{"_index":463,"title":{},"body":{"classes/UserRepository.html":{}}}],["console.log(user",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"injectables/TasksService.html":{}}}],["constructor(private",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["constructor(taskrepository",{"_index":394,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(userrepository",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{}}}],["contain",{"_index":132,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["controller",{"_index":38,"title":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":354,"title":{},"body":{"controllers/TasksController.html":{}}}],["controllers",{"_index":40,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["coverage",{"_index":468,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["created",{"_index":320,"title":{},"body":{"controllers/TasksController.html":{}}}],["createparamdecorator",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtask",{"_index":254,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtask(createtaskdto",{"_index":256,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtaskdto",{"_index":193,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["credentials",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials.dto",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["credentials.dto.ts",{"_index":104,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:13",{"_index":121,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials.dto.ts:29",{"_index":117,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["ctx",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["data",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["decorator",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/TaskEntity.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"classes/User.html":{}}}],["default",{"_index":115,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/TaskStatusValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["delete",{"_index":290,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["delete(':id",{"_index":363,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete(':id')@apiokresponse({description",{"_index":324,"title":{},"body":{"controllers/TasksController.html":{}}}],["deleted",{"_index":327,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetask",{"_index":316,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetask(id",{"_index":323,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetaskbyid",{"_index":393,"title":{},"body":{"injectables/TasksService.html":{}}}],["deletetaskbyid(id",{"_index":397,"title":{},"body":{"injectables/TasksService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":386,"title":{},"body":{"modules/TasksModule.html":{}}}],["description",{"_index":114,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"index.html":{}}}],["development",{"_index":551,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":469,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":527,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto/auth",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["dto/create",{"_index":262,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dto/tasks",{"_index":264,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["duplicate",{"_index":459,"title":{},"body":{"classes/UserRepository.html":{}}}],["e2e",{"_index":561,"title":{},"body":{"index.html":{}}}],["eager",{"_index":241,"title":{},"body":{"classes/TaskEntity.html":{},"classes/User.html":{}}}],["efficient",{"_index":536,"title":{},"body":{"index.html":{}}}],["entities",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":246,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/User.html":{}}}],["entity.{js,ts",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entityrepository",{"_index":261,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(taskentity",{"_index":267,"title":{},"body":{"classes/TaskRepository.html":{}}}],["entityrepository(user",{"_index":448,"title":{},"body":{"classes/UserRepository.html":{}}}],["enumerations",{"_index":521,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":457,"title":{},"body":{"classes/UserRepository.html":{}}}],["err.code",{"_index":461,"title":{},"body":{"classes/UserRepository.html":{}}}],["execute",{"_index":280,"title":{},"body":{"classes/TaskRepository.html":{}}}],["executioncontext",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exist",{"_index":215,"title":{},"body":{"injectables/JwtStratgey.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/UserRepository.html":{}}}],["expiresin",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["express",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":217,"title":{},"body":{"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extract",{"_index":214,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["extractjwt",{"_index":212,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":221,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["false",{"_index":242,"title":{},"body":{"classes/TaskEntity.html":{}}}],["field",{"_index":460,"title":{},"body":{"classes/UserRepository.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["filter.dto",{"_index":265,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["filter.dto.ts",{"_index":369,"title":{},"body":{"classes/TasksFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:11",{"_index":371,"title":{},"body":{"classes/TasksFilterDto.html":{}}}],["filter.dto.ts:7",{"_index":373,"title":{},"body":{"classes/TasksFilterDto.html":{}}}],["forbidden",{"_index":334,"title":{},"body":{"controllers/TasksController.html":{}}}],["found",{"_index":409,"title":{},"body":{"injectables/TasksService.html":{}}}],["found.exception",{"_index":404,"title":{},"body":{"injectables/TasksService.html":{}}}],["framework",{"_index":534,"title":{},"body":{"index.html":{}}}],["function",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":528,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":330,"title":{},"body":{"controllers/TasksController.html":{}}}],["get()@apiokresponse({description",{"_index":332,"title":{},"body":{"controllers/TasksController.html":{}}}],["gettaskbyid",{"_index":317,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettaskbyid(id",{"_index":329,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasks",{"_index":255,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasks(tasksfilterdto",{"_index":258,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["getting",{"_index":530,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grow",{"_index":567,"title":{},"body":{"index.html":{}}}],["hash",{"_index":434,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["hashpassword",{"_index":439,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":441,"title":{},"body":{"classes/UserRepository.html":{}}}],["heavily",{"_index":541,"title":{},"body":{"index.html":{}}}],["here",{"_index":578,"title":{},"body":{"index.html":{}}}],["host",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":585,"title":{},"body":{"index.html":{}}}],["id",{"_index":229,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{}}}],["identifier",{"_index":470,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":312,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["implements",{"_index":294,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["imports",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["in@in2016",{"_index":116,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["in_progress",{"_index":526,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":44,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["inject",{"_index":216,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["injectable",{"_index":166,"title":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injection",{"_index":387,"title":{},"body":{"modules/TasksModule.html":{}}}],["injectrepository",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"injectables/TasksService.html":{}}}],["injectrepository(taskrepository",{"_index":405,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(userrepository",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{}}}],["inside",{"_index":390,"title":{},"body":{"modules/TasksModule.html":{}}}],["inspired",{"_index":542,"title":{},"body":{"index.html":{}}}],["installation",{"_index":547,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":549,"title":{},"body":{"index.html":{}}}],["interface",{"_index":202,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":203,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["internalservererrorexception",{"_index":447,"title":{},"body":{"classes/UserRepository.html":{}}}],["isin",{"_index":374,"title":{},"body":{"classes/TasksFilterDto.html":{}}}],["isin([taskstatus.done",{"_index":376,"title":{},"body":{"classes/TasksFilterDto.html":{}}}],["isnotempty",{"_index":201,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/TasksFilterDto.html":{}}}],["isnotempty()@apiproperty({type",{"_index":197,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isoptional",{"_index":375,"title":{},"body":{"classes/TasksFilterDto.html":{}}}],["isoptional()@isin(undefined",{"_index":372,"title":{},"body":{"classes/TasksFilterDto.html":{}}}],["isoptional()@isnotempty",{"_index":370,"title":{},"body":{"classes/TasksFilterDto.html":{}}}],["isstatusvalid",{"_index":298,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["isstatusvalid(status",{"_index":304,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["isstring",{"_index":123,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isstring()@maxlength(20)@minlength(4)@apiproperty({type",{"_index":118,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isstring()@maxlength(20)@minlength(8)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":109,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["join",{"_index":574,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":220,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["jwtmodule",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":179,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStratgey.html":{},"coverage.html":{}}}],["jwtservice",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstratgey",{"_index":146,"title":{"injectables/JwtStratgey.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStratgey.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":582,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["letter",{"_index":136,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["license",{"_index":588,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":565,"title":{},"body":{"index.html":{}}}],["list",{"_index":325,"title":{},"body":{"controllers/TasksController.html":{}}}],["localhost",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(authcredentialsdto",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["lower",{"_index":137,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["make",{"_index":384,"title":{},"body":{"modules/TasksModule.html":{}}}],["manytoone",{"_index":247,"title":{},"body":{"classes/TaskEntity.html":{}}}],["manytoone(undefined",{"_index":239,"title":{},"body":{"classes/TaskEntity.html":{}}}],["matches",{"_index":124,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":141,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matching",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":125,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["maxlength(20",{"_index":128,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["mean",{"_index":388,"title":{},"body":{"modules/TasksModule.html":{}}}],["message",{"_index":112,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["metadata",{"_index":508,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":223,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["methods",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["minlength",{"_index":126,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(4",{"_index":129,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(8",{"_index":130,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["miscellaneous",{"_index":520,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":564,"title":{},"body":{"index.html":{}}}],["mode",{"_index":555,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":577,"title":{},"body":{"index.html":{}}}],["mysecret",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStratgey.html":{}}}],["myśliwiec",{"_index":583,"title":{},"body":{"index.html":{}}}],["name",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["nest",{"_index":544,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":587,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["nestjs/common/exceptions/not",{"_index":403,"title":{},"body":{"injectables/TasksService.html":{}}}],["nestjs/core",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt/dist/jwt.module",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{}}}],["nestjs/jwt/dist/jwt.service",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["nestjs/passport",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStratgey.html":{},"controllers/TasksController.html":{},"dependencies.html":{}}}],["nestjs/passport/dist/passport.module",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["nestjs/platform",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"controllers/TasksController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["new",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["node.js",{"_index":533,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":402,"title":{},"body":{"injectables/TasksService.html":{}}}],["notfoundexception(`task",{"_index":408,"title":{},"body":{"injectables/TasksService.html":{}}}],["npm",{"_index":548,"title":{},"body":{"index.html":{}}}],["null",{"_index":467,"title":{},"body":{"classes/UserRepository.html":{}}}],["number",{"_index":138,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{}}}],["onetomany",{"_index":428,"title":{},"body":{"classes/User.html":{}}}],["onetomany(undefined",{"_index":420,"title":{},"body":{"classes/User.html":{}}}],["open",{"_index":525,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["optional",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["override",{"_index":224,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["overview",{"_index":592,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":486,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":340,"title":{},"body":{"controllers/TasksController.html":{}}}],["param('id",{"_index":358,"title":{},"body":{"controllers/TasksController.html":{}}}],["parameters",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["parseintpipe",{"_index":341,"title":{},"body":{"controllers/TasksController.html":{}}}],["passport",{"_index":213,"title":{},"body":{"injectables/JwtStratgey.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":211,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["passportstrategy(strategy",{"_index":218,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["password",{"_index":106,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["passwords",{"_index":131,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["patch",{"_index":342,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id/status",{"_index":365,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id/status')@apiokresponse({description",{"_index":337,"title":{},"body":{"controllers/TasksController.html":{}}}],["payload",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{}}}],["payload.interface",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{}}}],["payload.interface.ts",{"_index":205,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["pg",{"_index":505,"title":{},"body":{"dependencies.html":{}}}],["pipes/task",{"_index":349,"title":{},"body":{"controllers/TasksController.html":{}}}],["pipetransform",{"_index":295,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["please",{"_index":575,"title":{},"body":{"index.html":{}}}],["port",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["post('/login",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/test",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/test')@useguards(undefined",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apicreatedresponse({description",{"_index":319,"title":{},"body":{"controllers/TasksController.html":{}}}],["postgres",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":42,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["primarygeneratedcolumn",{"_index":234,"title":{},"body":{"classes/TaskEntity.html":{},"classes/User.html":{}}}],["private",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{}}}],["production",{"_index":557,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":532,"title":{},"body":{"index.html":{}}}],["project",{"_index":566,"title":{},"body":{"index.html":{}}}],["promise",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["properties",{"_index":105,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"interfaces/JwtPayload.html":{},"classes/TaskEntity.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/TasksFilterDto.html":{},"classes/User.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["query",{"_index":270,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["query(validationpipe",{"_index":356,"title":{},"body":{"controllers/TasksController.html":{}}}],["query.andwhere",{"_index":276,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.andwhere('task.status",{"_index":275,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.getmany",{"_index":282,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.where('task.userid",{"_index":273,"title":{},"body":{"classes/TaskRepository.html":{}}}],["read",{"_index":576,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":296,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["reflect",{"_index":507,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":253,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["request",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStratgey.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["result",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.affected",{"_index":412,"title":{},"body":{"injectables/TasksService.html":{}}}],["results",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":355,"title":{},"body":{"controllers/TasksController.html":{}}}],["returned'})@apiforbiddenresponse({description",{"_index":333,"title":{},"body":{"controllers/TasksController.html":{}}}],["returns",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["rimraf",{"_index":510,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":552,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":415,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["scalable",{"_index":537,"title":{},"body":{"index.html":{}}}],["search",{"_index":271,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TasksFilterDto.html":{}}}],["secret",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":222,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["server",{"_index":538,"title":{},"body":{"index.html":{}}}],["side",{"_index":539,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":47,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signup(authcredentialsdto",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["special",{"_index":139,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["sponsors",{"_index":569,"title":{},"body":{"index.html":{}}}],["src/.../get",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":529,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../task",{"_index":522,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../typeorm.config.ts",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":41,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:22",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":381,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/auth/auth.module.ts",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth",{"_index":103,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/get",{"_index":348,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":204,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStratgey.html":{},"coverage.html":{}}}],["src/auth/user.entity",{"_index":245,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["src/auth/user.entity.ts",{"_index":414,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/auth/user.entity.ts:12",{"_index":423,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:15",{"_index":418,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:18",{"_index":419,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:25",{"_index":422,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:27",{"_index":425,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:9",{"_index":417,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.repository.ts",{"_index":438,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/auth/user.repository.ts:10",{"_index":443,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/auth/user.repository.ts:31",{"_index":445,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/auth/user.repository.ts:45",{"_index":442,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/config/typeorm.config.ts",{"_index":480,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":481,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/tasks/dto/create",{"_index":194,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/tasks/dto/tasks",{"_index":368,"title":{},"body":{"classes/TasksFilterDto.html":{},"coverage.html":{}}}],["src/tasks/pipes/task",{"_index":292,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["src/tasks/task",{"_index":524,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/tasks/task.entity",{"_index":427,"title":{},"body":{"classes/User.html":{}}}],["src/tasks/task.entity.ts",{"_index":227,"title":{},"body":{"classes/TaskEntity.html":{},"coverage.html":{}}}],["src/tasks/task.entity.ts:12",{"_index":238,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/tasks/task.entity.ts:15",{"_index":233,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/tasks/task.entity.ts:18",{"_index":237,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/tasks/task.entity.ts:25",{"_index":243,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/tasks/task.entity.ts:28",{"_index":244,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/tasks/task.entity.ts:9",{"_index":235,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/tasks/task.repository.ts",{"_index":252,"title":{},"body":{"classes/TaskRepository.html":{},"coverage.html":{}}}],["src/tasks/task.repository.ts:13",{"_index":260,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/tasks/task.repository.ts:40",{"_index":257,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/tasks/tasks.controller.ts",{"_index":315,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/tasks/tasks.controller.ts:36",{"_index":335,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:44",{"_index":331,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:55",{"_index":322,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:64",{"_index":328,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:73",{"_index":339,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.module.ts",{"_index":380,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service.ts",{"_index":392,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:13",{"_index":395,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:18",{"_index":400,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:22",{"_index":399,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:32",{"_index":396,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:39",{"_index":398,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:46",{"_index":401,"title":{},"body":{"injectables/TasksService.html":{}}}],["start",{"_index":553,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":556,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":558,"title":{},"body":{"index.html":{}}}],["started",{"_index":531,"title":{"index.html":{}},"body":{}}],["starter",{"_index":546,"title":{},"body":{"index.html":{}}}],["statements",{"_index":471,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":230,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["status.enum",{"_index":249,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"injectables/TasksService.html":{}}}],["status.enum.ts",{"_index":523,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":579,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStratgey.html":{}}}],["strategy.ts",{"_index":206,"title":{},"body":{"injectables/JwtStratgey.html":{},"coverage.html":{}}}],["strategy.ts:16",{"_index":208,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["strategy.ts:28",{"_index":210,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["string",{"_index":108,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"interfaces/JwtPayload.html":{},"classes/TaskEntity.html":{},"classes/TasksFilterDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["strong",{"_index":142,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["strong'})@apiproperty({type",{"_index":113,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["successfully",{"_index":326,"title":{},"body":{"controllers/TasksController.html":{}}}],["successfully'})@apibearerauth('token')@usepipes(validationpipe",{"_index":321,"title":{},"body":{"controllers/TasksController.html":{}}}],["super",{"_index":219,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["support",{"_index":570,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":590,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":430,"title":{},"body":{"classes/User.html":{}}}],["task",{"_index":198,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{}}}],["task.description",{"_index":278,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.dto",{"_index":263,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.dto.ts",{"_index":195,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:15",{"_index":199,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:7",{"_index":200,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.entity",{"_index":266,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.repository",{"_index":382,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["task.title",{"_index":277,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.user",{"_index":433,"title":{},"body":{"classes/User.html":{}}}],["taskentity",{"_index":226,"title":{"classes/TaskEntity.html":{}},"body":{"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"coverage.html":{}}}],["taskentity.description",{"_index":285,"title":{},"body":{"classes/TaskRepository.html":{}}}],["taskentity.save",{"_index":289,"title":{},"body":{"classes/TaskRepository.html":{}}}],["taskentity.status",{"_index":286,"title":{},"body":{"classes/TaskRepository.html":{}}}],["taskentity.title",{"_index":284,"title":{},"body":{"classes/TaskRepository.html":{}}}],["taskentity.user",{"_index":288,"title":{},"body":{"classes/TaskRepository.html":{}}}],["taskmanagement",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["taskrepository",{"_index":251,"title":{"classes/TaskRepository.html":{}},"body":{"classes/TaskRepository.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasks",{"_index":281,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/User.html":{}}}],["tasks.controller",{"_index":383,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":352,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["taskscontroller",{"_index":314,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksfilterdto",{"_index":259,"title":{"classes/TasksFilterDto.html":{}},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasksmodule",{"_index":13,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":351,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":236,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.done",{"_index":302,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["taskstatus.in_progress",{"_index":301,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"classes/TasksFilterDto.html":{}}}],["taskstatus.open",{"_index":287,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/TasksFilterDto.html":{}}}],["taskstatusvalidationpipe",{"_index":291,"title":{"classes/TaskStatusValidationPipe.html":{}},"body":{"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["test",{"_index":48,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTaskDto.html":{},"index.html":{}}}],["test(@getuser",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["test(user",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["test:covsupport",{"_index":563,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":562,"title":{},"body":{"index.html":{}}}],["tests",{"_index":560,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":568,"title":{},"body":{"index.html":{}}}],["thing",{"_index":389,"title":{},"body":{"modules/TasksModule.html":{}}}],["this.allowedstatus.indexof(status",{"_index":313,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["this.authservice.login(authcredentialsdto",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(authcredentialsdto",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.createquerybuilder('task",{"_index":272,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.findone",{"_index":465,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.hashpassword(password",{"_index":453,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.isstatusvalid(value",{"_index":310,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["this.jwtservice.sign(payload",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":437,"title":{},"body":{"classes/User.html":{}}}],["this.salt",{"_index":436,"title":{},"body":{"classes/User.html":{}}}],["this.taskrepository.createtask(createtaskdto",{"_index":410,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.delete",{"_index":411,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.findone",{"_index":407,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.gettasks(tasksfilterdto",{"_index":406,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.update",{"_index":413,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksservice.createtask(createtaskdto",{"_index":362,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.deletetaskbyid(id",{"_index":364,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettaskbyid(id",{"_index":359,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettasks(tasksfilterdto",{"_index":357,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.updatetaskstatus(id",{"_index":367,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.userrepository.findone",{"_index":225,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["this.userrepository.signup(authcredentialsdto",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.validateuserpassword",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{}}}],["title",{"_index":196,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{}}}],["token",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{}}}],["touch",{"_index":580,"title":{},"body":{"index.html":{}}}],["transform",{"_index":299,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["transform(value",{"_index":307,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["transformer",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":421,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":454,"title":{},"body":{"classes/UserRepository.html":{}}}],["twitter",{"_index":586,"title":{},"body":{"index.html":{}}}],["type",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksFilterDto.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":248,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([taskrepository",{"_index":391,"title":{},"body":{"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types/bcrypt",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":545,"title":{},"body":{"index.html":{}}}],["ui",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{}}}],["unauthorizedexception('invalid",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":240,"title":{},"body":{"classes/TaskEntity.html":{},"classes/User.html":{}}}],["unique",{"_index":119,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/User.html":{}}}],["unique(['username",{"_index":429,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":559,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updated",{"_index":338,"title":{},"body":{"controllers/TasksController.html":{}}}],["updatetaskstatus",{"_index":318,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetaskstatus(id",{"_index":336,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["upper",{"_index":134,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["useguards",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["useguards(authguard",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["useing",{"_index":268,"title":{},"body":{"classes/TaskRepository.html":{}}}],["usepipes",{"_index":343,"title":{},"body":{"controllers/TasksController.html":{}}}],["usepipes(validationpipe",{"_index":361,"title":{},"body":{"controllers/TasksController.html":{}}}],["user",{"_index":65,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/JwtStratgey.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["user.decorator",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["user.decorator.ts",{"_index":475,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.entity",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStratgey.html":{},"classes/UserRepository.html":{}}}],["user.id",{"_index":274,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["user.password",{"_index":452,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.repository",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{}}}],["user.salt",{"_index":450,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.save",{"_index":455,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.tasks",{"_index":250,"title":{},"body":{"classes/TaskEntity.html":{}}}],["user.username",{"_index":449,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.validatepassword(password",{"_index":466,"title":{},"body":{"classes/UserRepository.html":{}}}],["user1",{"_index":120,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["userid",{"_index":231,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["username",{"_index":107,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStratgey.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":155,"title":{"classes/UserRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStratgey.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["using",{"_index":283,"title":{},"body":{"classes/TaskRepository.html":{},"modules/TasksModule.html":{}}}],["uuid",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["valid",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["validate",{"_index":207,"title":{},"body":{"injectables/JwtStratgey.html":{},"classes/UserRepository.html":{}}}],["validate(payload",{"_index":209,"title":{},"body":{"injectables/JwtStratgey.html":{}}}],["validatepassword",{"_index":416,"title":{},"body":{"classes/User.html":{}}}],["validatepassword(password",{"_index":424,"title":{},"body":{"classes/User.html":{}}}],["validateuserpassword",{"_index":440,"title":{},"body":{"classes/UserRepository.html":{}}}],["validateuserpassword(authcredentialsdto",{"_index":444,"title":{},"body":{"classes/UserRepository.html":{}}}],["validation.pipe",{"_index":350,"title":{},"body":{"controllers/TasksController.html":{}}}],["validation.pipe.ts",{"_index":293,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["validation.pipe.ts:10",{"_index":308,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validation.pipe.ts:17",{"_index":305,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validation.pipe.ts:5",{"_index":303,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validationpipe",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["validator",{"_index":127,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/TasksFilterDto.html":{},"dependencies.html":{}}}],["value",{"_index":300,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"classes/UserRepository.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":476,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":595,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["watch",{"_index":554,"title":{},"body":{"index.html":{}}}],["website",{"_index":584,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":573,"title":{},"body":{"index.html":{}}}],["z",{"_index":111,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["z])(?=.*[a",{"_index":110,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TasksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './config/typeorm.config';\nimport { TasksModule } from './tasks/tasks.module';\nimport { AuthModule } from './auth/auth.module';\n\n// Root module for the application\n@Module({\n  imports: [TasksModule, TypeOrmModule.forRoot(typeOrmConfig), AuthModule],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                signup\n                            \n                            \n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \nsignup(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            test\n                        \n                        \n                    \n                \n            \n            \n                \ntest(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/test')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards, ValidationPipe } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport { AuthService } from './auth.service';\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { GetUser } from './get-user.decorator';\nimport { User } from './user.entity';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n  @Post('/signup')\n  signup(\n    @Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto,\n  ): Promise {\n    return this.authService.signup(authCredentialsDto);\n  }\n\n  @Post('/login')\n  login(\n    @Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto,\n  ): Promise {\n    return this.authService.login(authCredentialsDto);\n  }\n\n  @Post('/test')\n  // AuthGuard() will check token and if it valid will add user into request\n  @UseGuards(AuthGuard())\n  // @GetUser() Custom decorator to get user from request\n  test(@GetUser() user: User) {\n    console.log(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthCredentialsDto.html":{"url":"classes/AuthCredentialsDto.html","title":"class - AuthCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-credentials.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MaxLength(20)@MinLength(8)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password should be strong'})@ApiProperty({type: 'String', description: 'Password for user', default: 'In@in2016'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/auth-credentials.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MaxLength(20)@MinLength(4)@ApiProperty({type: String, description: 'The unique username for the user', default: 'user1'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/auth-credentials.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, Matches, MaxLength, MinLength } from 'class-validator';\n\nexport class AuthCredentialsDto {\n  @IsString()\n  @MaxLength(20)\n  @MinLength(4)\n  @ApiProperty({\n    type: String,\n    description: 'The unique username for the user',\n    default: 'user1',\n  })\n  username: string;\n\n  @IsString()\n  @MaxLength(20)\n  @MinLength(8)\n  // Passwords will contain at least 1 upper case letter\n  // Passwords will contain at least 1 lower case letter\n  // Passwords will contain at least 1 number or special character\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Password should be strong',\n  })\n  @ApiProperty({\n    type: 'String',\n    description: 'Password for user',\n    default: 'In@in2016',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJwtStratgey \n\nJwtStratgey \n\n\n\nAuthModule\n\nAuthModule\n\nJwtStratgey  -->\n\nAuthModule->JwtStratgey \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStratgey\n\nJwtStratgey\n\nAuthModule -->\n\nJwtStratgey->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStratgey\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStratgey\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt/dist/jwt.module';\nimport { PassportModule } from '@nestjs/passport/dist/passport.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStratgey } from './jwt-strategy';\nimport { UserRepository } from './user.repository';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository]),\n    JwtModule.register({\n      secret: 'mysecret',\n      signOptions: { expiresIn: 3600 },\n    }),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStratgey],\n  exports: [JwtStratgey, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt/dist/jwt.service';\nimport { InjectRepository } from '@nestjs/typeorm';\n\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { JwtPayload } from './jwt-payload.interface';\nimport { UserRepository } from './user.repository';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository,\n    private jwtService: JwtService,\n  ) {}\n\n  async signup(authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.userRepository.signup(authCredentialsDto);\n  }\n\n  async login(\n    authCredentialsDto: AuthCredentialsDto,\n  ): Promise {\n    const username = await this.userRepository.validateUserPassword(\n      authCredentialsDto,\n    );\n    if (!username) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const payload: JwtPayload = { username };\n    const token = await this.jwtService.sign(payload);\n\n    return { token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/create-task.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Task description', default: 'Task description test 1'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/create-task.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Task title', default: 'Task 1'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/create-task.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class CreateTaskDto {\n  @IsNotEmpty()\n  @ApiProperty({ type: String, description: 'Task title', default: 'Task 1' })\n  title: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Task description',\n    default: 'Task description test 1',\n  })\n  description: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  username: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStratgey.html":{"url":"injectables/JwtStratgey.html","title":"injectable - JwtStratgey","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStratgey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-strategy.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-strategy.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { JwtPayload } from './jwt-payload.interface';\nimport { User } from './user.entity';\nimport { UserRepository } from './user.repository';\n\n/*\n  This Strategy will extract token from request and extract payload from\n  token, then validate if there is user for this payload if exist will \n  inject the user into request\n */\n@Injectable()\nexport class JwtStratgey extends PassportStrategy(Strategy) {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'mysecret',\n    });\n  }\n\n  // This method should exist like @override\n  async validate(payload: JwtPayload): Promise {\n    const { username } = payload;\n    const user = await this.userRepository.findOne({ username });\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskEntity.html":{"url":"classes/TaskEntity.html","title":"class - TaskEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {eager: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from 'src/auth/user.entity';\nimport { BaseEntity, Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { TaskStatus } from './task-status.enum';\n\n@Entity()\nexport class TaskEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  title: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  status: TaskStatus;\n\n  @ManyToOne(\n    type => User,\n    user => user.tasks,\n    { eager: false },\n  )\n  user: User;\n\n  @Column()\n  userId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskRepository.html":{"url":"classes/TaskRepository.html","title":"class - TaskRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                getTasks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/task.repository.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasks(tasksFilterDto: TasksFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/task.repository.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tasksFilterDto\n                                    \n                                                TasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from 'src/auth/user.entity';\nimport { EntityRepository, Repository } from 'typeorm';\n\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { TasksFilterDto } from './dto/tasks-filter.dto';\nimport { TaskStatus } from './task-status.enum';\nimport { TaskEntity } from './task.entity';\n\n@EntityRepository(TaskEntity)\nexport class TaskRepository extends Repository {\n  //==============================(getTasks)====================================================//\n  // Useing repository to build a query\n  async getTasks(\n    tasksFilterDto: TasksFilterDto,\n    user: User,\n  ): Promise {\n    const { status, search } = tasksFilterDto;\n    // 1) Build a query\n    const query = this.createQueryBuilder('task');\n\n    query.where('task.userId = :userId', { userId: user.id });\n\n    if (status) {\n      query.andWhere('task.status = :status ', {\n        status: status,\n      });\n    }\n    if (search) {\n      query.andWhere(\n        'task.title LIKE :search OR task.description LIKE :search',\n        { search: `%${search}%` },\n      );\n    }\n    // 2) Execute the query\n    const tasks = await query.getMany();\n    return tasks;\n  }\n  //==============================(createTask)====================================================//\n  // 1) Using Entity\n  async createTask(\n    createTaskDto: CreateTaskDto,\n    user: User,\n  ): Promise {\n    const { title, description } = createTaskDto;\n    const taskEntity = new TaskEntity();\n\n    taskEntity.title = title;\n    taskEntity.description = description;\n    taskEntity.status = TaskStatus.OPEN;\n    taskEntity.user = user;\n\n    await taskEntity.save();\n\n    delete taskEntity.user;\n    return taskEntity;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskStatusValidationPipe.html":{"url":"classes/TaskStatusValidationPipe.html","title":"class - TaskStatusValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskStatusValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/pipes/task-status-validation.pipe.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            PipeTransform\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                allowedStatus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isStatusValid\n                            \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            allowedStatus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    TaskStatus.OPEN,\n    TaskStatus.IN_PROGRESS,\n    TaskStatus.DONE,\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/pipes/task-status-validation.pipe.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isStatusValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isStatusValid(status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/pipes/task-status-validation.pipe.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/pipes/task-status-validation.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException, PipeTransform } from '@nestjs/common';\nimport { TaskStatus } from '../task-status.enum';\n\nexport class TaskStatusValidationPipe implements PipeTransform {\n  readonly allowedStatus = [\n    TaskStatus.OPEN,\n    TaskStatus.IN_PROGRESS,\n    TaskStatus.DONE,\n  ];\n  transform(value: any) {\n    if (!this.isStatusValid(value)) {\n      throw new BadRequestException(`${value} is not a valid status`);\n    }\n    return value;\n  }\n\n  private isStatusValid(status: any): boolean {\n    // if index of status exist will return 1 id not will return -1\n    const idx: number = this.allowedStatus.indexOf(status);\n    return idx !== -1;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                deleteTask\n                            \n                            \n                                getTaskById\n                            \n                            \n                                getTasks\n                            \n                            \n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiCreatedResponse({description: 'Task has been created successfully'})@ApiBearerAuth('token')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTask(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse({description: 'Tasks list has been successfully deleted'})\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ngetTaskById(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(tasksFilterDto: TasksFilterDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'Tasks list has been successfully returned'})@ApiForbiddenResponse({description: 'Forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tasksFilterDto\n                                    \n                                                TasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTaskStatus(id: number, status: TaskStatus, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@ApiOkResponse({description: 'Tasks list has been successfully updated'})\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                TaskStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiCreatedResponse, ApiForbiddenResponse, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { GetUser } from 'src/auth/get-user.decorator';\nimport { User } from 'src/auth/user.entity';\n\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { TasksFilterDto } from './dto/tasks-filter.dto';\nimport { TaskStatusValidationPipe } from './pipes/task-status-validation.pipe';\nimport { TaskStatus } from './task-status.enum';\nimport { TaskEntity } from './task.entity';\nimport { TasksService } from './tasks.service';\n\n@ApiTags('tasks')\n@Controller('tasks')\n@UseGuards(AuthGuard())\nexport class TasksController {\n  constructor(private tasksService: TasksService) {}\n\n  @Get()\n  @ApiOkResponse({ description: 'Tasks list has been successfully returned' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  getTasks(\n    @Query(ValidationPipe) tasksFilterDto: TasksFilterDto,\n    @GetUser() user: User,\n  ) {\n    return this.tasksService.getTasks(tasksFilterDto, user);\n  }\n\n  @Get(':id')\n  getTaskById(\n    @Param('id', ParseIntPipe) id: number,\n    @GetUser() user: User,\n  ): Promise {\n    return this.tasksService.getTaskById(id, user);\n  }\n\n  @Post()\n  @ApiCreatedResponse({ description: 'Task has been created successfully' })\n  @ApiBearerAuth('token')\n  @UsePipes(ValidationPipe)\n  createTask(\n    @Body() createTaskDto: CreateTaskDto,\n    @GetUser() user: User,\n  ): Promise {\n    return this.tasksService.createTask(createTaskDto, user);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse({ description: 'Tasks list has been successfully deleted' })\n  deleteTask(\n    @Param('id', ParseIntPipe) id: number,\n    @GetUser() user: User,\n  ): Promise {\n    return this.tasksService.deleteTaskById(id, user);\n  }\n\n  @Patch(':id/status')\n  @ApiOkResponse({ description: 'Tasks list has been successfully updated' })\n  updateTaskStatus(\n    @Param('id', ParseIntPipe) id: number,\n    @Body('status', TaskStatusValidationPipe) status: TaskStatus,\n    @GetUser() user: User,\n  ): Promise {\n    return this.tasksService.updateTaskStatus(id, status, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TasksFilterDto.html":{"url":"classes/TasksFilterDto.html","title":"class - TasksFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TasksFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/tasks-filter.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                search\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/tasks-filter.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/tasks-filter.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNotEmpty, IsOptional } from 'class-validator';\nimport { TaskStatus } from '../task-status.enum';\n\nexport class TasksFilterDto {\n  @IsOptional()\n  @IsIn([TaskStatus.DONE, TaskStatus.IN_PROGRESS, TaskStatus.OPEN])\n  status: TaskStatus;\n\n  @IsOptional()\n  @IsNotEmpty()\n  search: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_imports\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from 'src/auth/auth.module';\n\nimport { TaskRepository } from './task.repository';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\n\n@Module({\n  // Make TaskRepository available in task module using dependency injection\n  // Import AuthModule mean any thing inside AuthModule will be available in Task module\n  imports: [TypeOrmModule.forFeature([TaskRepository]), AuthModule],\n  controllers: [TasksController],\n  providers: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTaskById\n                            \n                            \n                                    Async\n                                getTaskById\n                            \n                            \n                                getTasks\n                            \n                            \n                                    Async\n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: TaskRepository)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        TaskRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTaskById(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskById(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(tasksFilterDto: TasksFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tasksFilterDto\n                                    \n                                                TasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskStatus(id: number, status: TaskStatus, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                TaskStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { NotFoundException } from '@nestjs/common/exceptions/not-found.exception';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from 'src/auth/user.entity';\n\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { TasksFilterDto } from './dto/tasks-filter.dto';\nimport { TaskStatus } from './task-status.enum';\nimport { TaskEntity } from './task.entity';\nimport { TaskRepository } from './task.repository';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectRepository(TaskRepository)\n    private taskRepository: TaskRepository,\n  ) {}\n  getTasks(tasksFilterDto: TasksFilterDto, user: User): Promise {\n    return this.taskRepository.getTasks(tasksFilterDto, user);\n  }\n\n  async getTaskById(id: number, user: User): Promise {\n    const task = await this.taskRepository.findOne({\n      where: { id, userId: user.id },\n    });\n    if (!task) {\n      throw new NotFoundException(`Task not found for id = ${id} `);\n    }\n    return task;\n  }\n\n  async createTask(\n    createTaskDto: CreateTaskDto,\n    user: User,\n  ): Promise {\n    return await this.taskRepository.createTask(createTaskDto, user);\n  }\n\n  async deleteTaskById(id: number, user: User): Promise {\n    const result = await this.taskRepository.delete({ id, userId: user.id });\n    if (!result.affected) {\n      throw new NotFoundException(`Task not found for id = ${id} `);\n    }\n  }\n\n  async updateTaskStatus(\n    id: number,\n    status: TaskStatus,\n    user: User,\n  ): Promise {\n    const result = await this.taskRepository.update(\n      { id, userId: user.id },\n      {\n        status: status,\n      },\n    );\n    if (!result.affected) {\n      throw new NotFoundException(`Task not found for id = ${id} `);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                tasks\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/user.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/user.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/user.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined, {eager: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/user.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/user.entity.ts:12\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/user.entity.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\nimport { TaskEntity } from 'src/tasks/task.entity';\nimport { BaseEntity, Column, Entity, OneToMany, PrimaryGeneratedColumn, Unique } from 'typeorm';\n\n@Entity()\n@Unique(['username']) // Take array of columns to be unique\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column()\n  salt: string;\n\n  @OneToMany(\n    type => TaskEntity,\n    task => task.user,\n    { eager: true },\n  )\n  tasks: TaskEntity[];\n\n  async validatePassword(password: string): Promise {\n    const hash = await bcrypt.hash(password, this.salt);\n    return hash === this.password;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                validateUserPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/user.repository.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/user.repository.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserPassword(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/user.repository.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictException, InternalServerErrorException } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { EntityRepository, Repository } from 'typeorm';\n\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { User } from './user.entity';\n\n@EntityRepository(User)\nexport class UserRepository extends Repository {\n  async signup(authCredentialsDto: AuthCredentialsDto): Promise {\n    const { username, password } = authCredentialsDto;\n\n    const user = new User();\n    user.username = username;\n    user.salt = await bcrypt.genSalt();\n    user.password = await this.hashPassword(password, user.salt);\n\n    try {\n      await user.save();\n    } catch (err) {\n      // this code for duplicate field value\n      if (err.code === '23505') {\n        throw new ConflictException('Username already exist');\n      } else {\n        throw new InternalServerErrorException();\n      }\n    }\n  }\n\n  // Validate User Password\n  async validateUserPassword(\n    authCredentialsDto: AuthCredentialsDto,\n  ): Promise {\n    const { username, password } = authCredentialsDto;\n\n    const user = await this.findOne({ username });\n    if (user && (await user.validatePassword(password))) {\n      return user.username;\n    }\n\n    return null;\n  }\n\n  // Hash Password\n  async hashPassword(password: string, salt: string): Promise {\n    return bcrypt.hash(password, salt);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-credentials.dto.ts\n            \n            class\n            AuthCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-strategy.ts\n            \n            injectable\n            JwtStratgey\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/dto/tasks-filter.dto.ts\n            \n            class\n            TasksFilterDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/pipes/task-status-validation.pipe.ts\n            \n            class\n            TaskStatusValidationPipe\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/task.entity.ts\n            \n            class\n            TaskEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/tasks/task.repository.ts\n            \n            class\n            TaskRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.4\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/swagger : ^4.7.5\n        \n            @nestjs/typeorm : ^7.1.4\n        \n            @types/bcrypt : ^3.0.0\n        \n            @types/passport-jwt : ^3.0.3\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.4\n        \n            typeorm : ^0.2.29\n        \n            uuid : ^8.3.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskStatus   (src/.../task-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tasks/task-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                Value : OPEN\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtStratgey \n\nJwtStratgey \n\nJwtStratgey  -->\n\nAuthModule->JwtStratgey \n\n\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStratgey\n\nJwtStratgey\n\nAuthModule -->\n\nJwtStratgey->AuthModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            typeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/config/typeorm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            typeOrmConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: 'postgres',\n  host: 'localhost',\n  port: 5432,\n  username: 'postgres',\n  password: 'postgres',\n  database: 'taskmanagement',\n  entities: [__dirname + '/../**/*.entity.{js,ts}'],\n  synchronize: true,\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
